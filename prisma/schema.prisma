// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @map("_id") @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @map("_id")  @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @map("_id")  @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("patient") // "patient" or "doctor"
  accounts      Account[]
  sessions      Session[]
  doctorProfile DoctorProfile?
  appointments  Appointment[]
  reports       Report[]
}

model VerificationToken {
   id       String   @id @map("_id") @default(cuid())
  identifier String
  token     String   @unique
  expires   DateTime
  @@unique([identifier, token])
}

model DoctorProfile {
  id              String   @id @map("_id") @default(cuid())
  userId          String   @unique
  specialization  String
  yearsExperience Int
  bio             String   
  consultationFee String? 
  availability    Json?    // Store availability as JSON
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments    Appointment[]
}

model Appointment {
  id          String   @id @map("_id") @default(cuid())
  patientId   String
  doctorId    String
  doctorProfileId String
  startTime   DateTime
  endTime     DateTime
  meetLink    String?
  status      String   @default("scheduled") // scheduled, completed, cancelled
  notes       String?  
  reportId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  patient     User     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade)
  report      Report?  @relation(fields: [reportId], references: [id])
}

model Report {
  id          String   @id @map("_id") @default(cuid())
  userId      String
  faceShape   String
  teethColor  String
  teethAlignment String
  teethSize   String
  recommendedStyles Json
  imageUrl    String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

